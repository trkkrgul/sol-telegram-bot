version: '3.8'

services:
  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes # AOF persistence aktif
    networks:
      - socket-balancer-network

  balancer-manager:
    build:
      context: ./balancer-manager
      dockerfile: Dockerfile
    image: balancer-manager:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - WALLETS_PER_BALANCER=${WALLETS_PER_BALANCER}
      - SOLANA_RPC_WS=${SOLANA_RPC_WS}
      - SOLANA_RPC_HTTP=${SOLANA_RPC_HTTP}
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./socket-balancer:/app/socket-balancer:ro
    working_dir: /app
    user: root
    privileged: true
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - socket-balancer-network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3000']
      interval: 30s
      timeout: 10s
      retries: 3

  price-service:
    build:
      context: ./price-service
      dockerfile: Dockerfile
    image: price-service:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - SOLANA_RPC_HTTP=${SOLANA_RPC_HTTP}
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - socket-balancer-network

  campaign-service:
    build:
      context: ./campaign-service
      dockerfile: Dockerfile
    image: campaign-service:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongodb:27017/campaign?replicaSet=rs0&directConnection=true
      - SOLANA_RPC_WS=${SOLANA_RPC_WS}
      - SOLANA_RPC_HTTP=${SOLANA_RPC_HTTP}
      - TRANSFER_SOLANA_RPC_WS=${TRANSFER_SOLANA_RPC_WS}
      - TRANSFER_SOLANA_RPC_HTTP=${TRANSFER_SOLANA_RPC_HTTP}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - USDC_MINT=${USDC_MINT}
      - ADMIN_GROUP_ID=${ADMIN_GROUP_ID}
      - ADMIN_WALLET=${ADMIN_WALLET}
    depends_on:
      mongodb:
        condition: service_healthy
      mongodb-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - socket-balancer-network

  mongodb:
    image: mongo:latest
    command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
    ports:
      - '27017:27017'
    volumes:
      - mongodb_campaign_data:/data/db
    networks:
      - socket-balancer-network
    healthcheck:
      test: |
        mongosh --eval "
          try {
            if (rs.status().ok) {
              quit(0);
            } else {
              quit(1);
            }
          } catch (err) {
            quit(1);
          }"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  mongodb-setup:
    image: mongo:latest
    restart: 'no'
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - socket-balancer-network
    command: >
      mongosh --host mongodb:27017 --eval '
        try {
          if (!rs.status().ok) {
            rs.initiate({
              _id: "rs0",
              members: [{ _id: 0, host: "mongodb:27017", priority: 1 }]
            });
            while (!rs.isMaster().ismaster) {
              print("Waiting for primary...");
              sleep(1000);
            }
            print("Primary is ready!");
          }
        } catch (err) {
          if (err.codeName === "NotYetInitialized") {
            rs.initiate({
              _id: "rs0",
              members: [{ _id: 0, host: "mongodb:27017", priority: 1 }]
            });
            while (!rs.isMaster().ismaster) {
              print("Waiting for primary...");
              sleep(1000);
            }
            print("Primary is ready!");
          } else {
            print("Error:", err);
            quit(1);
          }
        }'

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - socket-balancer-network
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  socket-balancer:
    build:
      context: ./socket-balancer
      dockerfile: Dockerfile
    image: socket-balancer:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - SOLANA_RPC_HTTP=${SOLANA_RPC_HTTP}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672

    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - socket-balancer-network

# External network tanımı
networks:
  socket-balancer-network:
    driver: overlay
    attachable: true
    name: socket-balancer-network

volumes:
  redis_data: # Redis verileri için kalıcı volume
  mongodb_campaign_data:
